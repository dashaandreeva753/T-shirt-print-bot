import telebot
from telebot import types
import json

TOKEN = "7367185406:AAHsojbYXXLCAm0kVgO8WUVtd_g9wmgup_I"

bot = telebot.TeleBot(TOKEN)

user_data = {}


@bot.message_handler(commands=["start"])
def handle_start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ú—ã —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–Ω—Ç—ã"
                                      " –¥–ª—è —Ñ—É—Ç–±–æ–ª–æ–∫. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å"
                                      " –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ. –£–¥–∞—á–Ω—ã—Ö –≤–∞–º –ø–æ–∫—É–ø–æ–∫!")


@bot.message_handler(commands=["recording_data"])
def handle_recording_data(message):
    user_data[message.chat.id] = {}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ")
    bot.register_next_step_handler(msg, get_name)


def get_name(message):
    user_data[message.chat.id]["name"] = message.text
    msg = bot.send_message(message.chat.id, "–í–∞—à–µ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    bot.register_next_step_handler(msg, callback=get_phone)


def get_phone(message):
    user_data[message.chat.id]["phone"] = message.text
    add_client(message, user_data[message.chat.id]["name"], user_data[message.chat.id]["phone"])
    bot.send_message(message.chat.id, f"–í–∞—à–µ –∏–º—è {user_data[message.chat.id]['name']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. "
                     f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {user_data[message.chat.id]['phone']} —Å–æ—Ö—Ä–∞–Ω—ë–Ω ")


def add_client(message, client_name, client_phone):
    try:
        # –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª –∏ —á—Ç–µ–Ω–∏—è
        with open("name.json", "r", encoding="utf-8") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {"clients": [], "embroidery": [], "sizes": []}
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ "clients"
    new_client = {"id": str(message.chat.id), "name": client_name, "phone": client_phone}

    for client in data["clients"]:
        if client.get("id") == str(message.chat.id):
            client["name"] = client_name
            client["phone"] = client_phone
            break
    else:
        data["clients"].append(new_client)

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª json –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    with open("name.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


@bot.message_handler(commands=["complaint"])
def handle_complaint(message):
    user_data[message.chat.id] = {}
    msg = bot.send_message(message.chat.id, "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤")
    bot.register_next_step_handler(msg, get_complaint)


def get_complaint(message):
    user_data[message.chat.id]["complaint"] = message.text
    add_complaint(message, user_data[message.chat.id]["complaint"])
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å—ë –ø—Ä–æ—Å–º–æ—Ç—Ä–∏–º")


def add_complaint(message, complaint):
    try:
        with open("data.json", "r", encoding="utf-8") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {"clients": []}
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    new_client = {"id": str(message.chat.id), "complaint": complaint}
    data["clients"].append(new_client)

    with open("data.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


@bot.message_handler(commands=["services"])
def handle_services(message):
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "üìå–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å: –ü–µ—á–∞—Ç—å –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞—Ö –º–µ—Ç–æ–¥–æ–º —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏. "
                                      "–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∏—Ä–∞–∂–µ–π.\nüìå–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–µ—á–∞—Ç—å: –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å "
                                      "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä—è–º–æ –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫—É. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è "
                                      "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\nüìå–¢–µ—Ä–º–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–∞—è –ø–µ—á–∞—Ç—å: "
                                      "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞—Ö –∏–∑ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ò–¥–µ–∞–ª—å–Ω—ã–π "
                                      "–≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º—ã.\nüìå–ü—Ä—è–º–∞—è –ø–µ—á–∞—Ç—å –Ω–∞ —Ç–∫–∞–Ω–∏ (DTG): –ü–æ–∑–≤–æ–ª—è–µ—Ç "
                                      "–ø–µ—á–∞—Ç–∞—Ç—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–µ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –û—Ç–ª–∏—á–∞–µ—Ç—Å—è "
                                      "–≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–π–∫–æ—Å—Ç—å—é –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\nüìå–í—ã—à–∏–≤–∫–∞: –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ "
                                      "–¥–∏–∑–∞–π–Ω –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫—É —Å –ø–æ–º–æ—â—å—é –≤—ã—à–∏–≤–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —à–∞—Ä–º–∞ –∏ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç–∏.")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø–µ—á–∞—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è üòä")
    bot.register_next_step_handler(msg, callback=get_embroidery)


def get_embroidery(message):
    user_data[message.chat.id]["embroidery"] = message.text
    add_embroidery(message, user_data[message.chat.id]["embroidery"])
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤–∞–º –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!")


def add_embroidery(message, embroidery_text):
    try:
        # –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª –∏ —á—Ç–µ–Ω–∏—è
        with open("name.json", "r", encoding="utf-8") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {"clients": [], "embroidery": [], "sizes": []}
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ "embroidery"
    new_client = {"id": str(message.chat.id), "embroidery": embroidery_text}

    for client in data["embroidery"]:
        if client.get("id") == str(message.chat.id):
            client["embroidery"] = embroidery_text
            break
    else:
        data["clients"].append(new_client)

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª json –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    with open("name.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


@bot.message_handler(commands=["sizes"])
def handle_sizes(message):
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "üìåXS: 88 —Å–º (–æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏), 68 —Å–º (–¥–ª–∏–Ω–∞)\nüìåS: 94 —Å–º (–æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏), 70 —Å–º "
                                      "(–¥–ª–∏–Ω–∞)\nüìåM: 100 —Å–º (–æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏), 72 —Å–º (–¥–ª–∏–Ω–∞)\nüìåL: 106 —Å–º (–æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏), "
                                      "74 —Å–º (–¥–ª–∏–Ω–∞)\nüìåXL: 112 —Å–º (–æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏), 76 —Å–º (–¥–ª–∏–Ω–∞)\nüìåXXL: 118 —Å–º "
                                      "(–æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏), 78 —Å–º (–¥–ª–∏–Ω–∞)")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç üìù")
    bot.register_next_step_handler(msg, get_sizes)


def get_sizes(message):
    user_data[message.chat.id]["sizes"] = message.text
    add_sizes(message, user_data[message.chat.id]["sizes"])
    bot.send_message(message.chat.id, f"–•–æ—Ä–æ—à–æ, –≤–∞—à —Ä–∞–∑–º–µ—Ä {user_data[message.chat.id]['sizes']} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")


def add_sizes(message, sizes_text):
    try:
        with open("name.json", "r", encoding="utf-8") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {"clients": [], "embroidery": [], "sizes": []}
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    new_client = {"id": str(message.chat.id), "sizes": sizes_text}

    for client in data["sizes"]:
        if client.get("id") == str(message.chat.id):
            client["sizes"] = sizes_text
            break
    else:
        data["sizes"].append(new_client)

    with open("name.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


@bot.message_handler(commands=["questions"])
def handle_questions(message):
    keyboard = generate_questions()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å: ", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id

    if call.data.startswith("–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å"):
        bot.send_message(chat_id, "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –≤ —Ä–∞–∑–¥–µ–ª–µ /services, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π "
                                  "—Ä–∞–∑–º–µ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ /sizes –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –¥–∏–∑–∞–π–Ω –ø–æ –ø–æ—á—Ç–µ example@gmail.com. –ú—ã "
                                  "—Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.", reply_markup=generate_questions())
    elif call.data.startswith("–ú–æ–∂–Ω–æ –ª–∏"):
        bot.send_message(chat_id, "–î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ø–µ—á–∞—Ç—å —Å –ª—é–±—ã–º –¥–∏–∑–∞–π–Ω–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à "
                                  "–¥–∏–∑–∞–π–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫ –∫–∞—á–µ—Å—Ç–≤—É.",
                         reply_markup=generate_questions())
    elif call.data.startswith("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏"):
        bot.send_message(chat_id, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äî –æ—Ç 3 –¥–æ 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –°—Ä–æ–∫–∏ –º–æ–≥—É—Ç "
                                  "–≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä—ë–º–∞ –∑–∞–∫–∞–∑–∞.",
                         reply_markup=generate_questions())
    elif call.data.startswith("–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã"):
        bot.send_message(chat_id, "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –Ω–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.",
                         reply_markup=generate_questions())
    elif call.data.startswith("–ï—Å—Ç—å –ª–∏"):
        bot.send_message(chat_id, "–î–∞, –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±—Ä–∞–∫–∞ –∏–ª–∏ –µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ "
                                  "–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –¥–∏–∑–∞–π–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π –ø–æ—Å–ª–µ "
                                  "–ø–æ–ª—É—á–µ–Ω–∏—è.", reply_markup=generate_questions())


def generate_questions():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton(text="–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–µ—á–∞—Ç—å —Ñ—É—Ç–±–æ–ª–∫–∏?", callback_data="–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å")
    button2 = types.InlineKeyboardButton(text="–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –ø–µ—á–∞—Ç—å —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º?",
                                         callback_data="–ú–æ–∂–Ω–æ –ª–∏")
    button3 = types.InlineKeyboardButton(text="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞?",
                                         callback_data="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏")
    button4 = types.InlineKeyboardButton(text="–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?", callback_data="–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã")
    button5 = types.InlineKeyboardButton(text="–ï—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–¥–æ—à—ë–ª?",
                                         callback_data="–ï—Å—Ç—å –ª–∏")
    keyboard.add(button1, button2, button3, button4, button5)
    return keyboard


if __name__ == "__main__":
    bot.polling(non_stop=True)
